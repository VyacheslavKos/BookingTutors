import os

from flask import Flask
from flask import render_template
from flask_sqlalchemy import SQLAlchemy
from flask_migrate import Migrate
from flask_wtf import FlaskForm

from wtforms import StringField
from wtforms import HiddenField
from wtforms import SubmitField
from wtforms import RadioField
from wtforms.validators import InputRequired


app = Flask(__name__)
# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app.config["DEBUG"] = False
# - URL –¥–æ—Å—Ç—É–ø–∞ –∫ –ë–î –±–µ—Ä–µ–º –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è DATABASE_URL
app.config["SQLALCHEMY_DATABASE_URI"] = os.environ.get("DATABASE_URL")
app.config["SQLALCHEMY_TRACK_MODIFICATIONS"] = False
app.secret_key = "randomstring777"

# –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
db = SQLAlchemy(app)
# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –º–∏–≥—Ä–∞—Ü–∏–π
migrate = Migrate(app, db)


teachers_goals_association = db.Table(
    "teachers_goals",
    db.Column("teacher_id", db.Integer, db.ForeignKey("teachers.id"), nullable=False),
    db.Column("goal_id", db.Integer, db.ForeignKey("goals.id"), nullable=False)
)


class Teacher(db.Model):
    __tablename__ = 'teachers'
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String, nullable=False)
    about = db.Column(db.Text, nullable=False)
    rating = db.Column(db.Float)
    picture = db.Column(db.String)
    price = db.Column(db.Integer, nullable=False)
    goals = db.relationship('Goal', secondary=teachers_goals_association, back_populates='teachers')
    timetables = db.relationship('Timetable', back_populates='teacher')
    bookings = db.relationship('Booking', back_populates='teacher')


class Goal(db.Model):
    __tablename__ = 'goals'
    id = db.Column(db.Integer, primary_key=True)
    goal = db.Column(db.String, nullable=False)
    goal_rus = db.Column(db.String, nullable=False)
    teachers = db.relationship('Teacher', secondary=teachers_goals_association, back_populates='goals')


class Timetable(db.Model):
    __tablename__ = 'timetables'
    id = db.Column(db.Integer, primary_key=True)
    teacher_id = db.Column(db.Integer, db.ForeignKey("teachers.id"))
    teacher = db.relationship('Teacher', back_populates='timetables')
    day = db.Column(db.String, nullable=False)
    time = db.Column(db.String, nullable=False)
    free = db.Column(db.Boolean, nullable=False)


class Booking(db.Model):
    __tablename__ = 'bookings'
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String, nullable=False)
    phone = db.Column(db.String, nullable=False)
    day = db.Column(db.String, nullable=False)
    time = db.Column(db.String, nullable=False)
    teacher_id = db.Column(db.Integer, db.ForeignKey("teachers.id"))
    teacher = db.relationship("Teacher", back_populates="bookings")


class Request(db.Model):
    __tablename__ = 'requests'
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String, nullable=False)
    phone = db.Column(db.String, nullable=False)
    goal = db.Column(db.String, nullable=False)
    weektime = db.Column(db.String, nullable=False)


# –ó–∞–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä–∏–∫–∏ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –≤—ã–≤–æ–¥–∞ –≤ —à–∞–±–ª–æ–Ω–∞—Ö

days = {'mon': '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', 'tue': '–í—Ç–æ—Ä–Ω–∏–∫', 'wed': '–°—Ä–µ–¥–∞', 'thu': '–ß–µ—Ç–≤–µ—Ä–≥', 'fri': '–ü—è—Ç–Ω–∏—Ü–∞', 'sat': '–°—É–±–±–æ—Ç–∞',
        'sun': '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'}
pics = {'travel': '‚õ±', 'study': 'üè´', 'work': 'üè¢', 'relocate': 'üöú', 'programming': '‚úå'}

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª–∞—Å—Å—ã –ø–æ–¥ –¥–≤–µ —Ñ–æ—Ä–º—ã –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (Booking) –∏ –∑–∞–ø—Ä–æ—Å–∞ (Request)


class BookingForm(FlaskForm):
    clientName = StringField("–í–∞—Å –∑–æ–≤—É—Ç", [InputRequired()])
    clientPhone = StringField("–í–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω", [InputRequired()])
    clientWeekday = HiddenField()
    clientTime = HiddenField()
    clientTeacher = HiddenField()
    submit = SubmitField('–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–æ–±–Ω—ã–π —É—Ä–æ–∫')


class RequestForm(FlaskForm):
    clientGoal = RadioField('–¶–µ–ª—å', choices=[('–î–ª—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π', '–î–ª—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π'), ('–î–ª—è —É—á–µ–±—ã', '–î–ª—è —É—á–µ–±—ã'),
                                             ('–î–ª—è —Ä–∞–±–æ—Ç—ã', '–î–ª—è —Ä–∞–±–æ—Ç—ã'), ('–î–ª—è –ø–µ—Ä–µ–µ–∑–¥–∞', '–î–ª—è –ø–µ—Ä–µ–µ–∑–¥–∞'),
                                             ('–î–ª—è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è', '–î–ª—è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è')],
                            default='–î–ª—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π')
    clientWeektime = RadioField('–í—Ä–µ–º—è', choices=[('1-2 —á–∞—Å–∞ –≤ –Ω–µ–¥–µ–ª—é', '1-2 —á–∞—Å–∞ –≤ –Ω–µ–¥–µ–ª—é'),
                                                  ('3-5 —á–∞—Å–æ–≤ –≤ –Ω–µ–¥–µ–ª—é', '3-5 —á–∞—Å–æ–≤ –≤ –Ω–µ–¥–µ–ª—é'),
                                                  ('5-7 —á–∞—Å–æ–≤ –≤ –Ω–µ–¥–µ–ª—é', '5-7 —á–∞—Å–æ–≤ –≤ –Ω–µ–¥–µ–ª—é'),
                                                  ('7-10 —á–∞—Å–æ–≤ –≤ –Ω–µ–¥–µ–ª—é', '7-10 —á–∞—Å–æ–≤ –≤ –Ω–µ–¥–µ–ª—é')],
                                default='1-2 —á–∞—Å–∞ –≤ –Ω–µ–¥–µ–ª—é')
    clientName = StringField("–í–∞—Å –∑–æ–≤—É—Ç", [InputRequired()])
    clientPhone = StringField("–í–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω", [InputRequired()])
    submit = SubmitField('–ù–∞–π–¥–∏—Ç–µ –º–Ω–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è')


@app.route('/')
def re_main():
    r_teachers = []
    goals = Goal.query.all()
    teachers = Teacher.query.order_by(db.func.random()).all()
    for teacher in teachers:
        if len(r_teachers) < 6:
            r_teachers.append(teacher)
    return render_template('index.html', r_teachers=r_teachers, goals=goals, pics=pics)


@app.route('/goals/<goal>/')
def re_goals(goal):
    db_goal = db.session.query(Goal).filter(Goal.goal == goal).first()
    return render_template('goal.html', db_goal=db_goal, pics=pics)


@app.route('/profiles/<int:id_teacher>/')
def re_profiles(id_teacher):
    teacher = db.session.query(Teacher).get_or_404(id_teacher)
    # –û—Ç–ª–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–Ω—è—Ç—ã–µ –¥–Ω–∏ —É –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
    full = []
    for day in days:
        flag = 0
        for timetable in teacher.timetables:
            if timetable.day == day:
                if timetable.free:
                    flag = 1
                    break
        if flag == 0:
            full.append(day)
    return render_template('profile.html', teacher=teacher, days=days, full=full)


@app.route('/request/', methods=["GET", "POST"])
def re_request():
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º/–ø–æ–ª—É—á–∞–µ–º —Ñ–æ—Ä–º—É –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ –≤–∞–ª–∏–¥–∞—Ü–∏—é
    form = RequestForm()
    if form.validate_on_submit():
        clientGoal = form.clientGoal.data
        clientWeektime = form.clientWeektime.data
        clientName = form.clientName.data
        clientPhone = form.clientPhone.data
        # –ó–∞–Ω–æ—Å–∏–º –∑–∞–ø—Ä–æ—Å –≤ —Ç–∞–±–ª–∏—Ü—É requests –ë–î
        request = Request(
            name=clientName,
            phone=clientPhone,
            goal=clientGoal,
            weektime=clientWeektime
        )
        db.session.add(request)
        db.session.commit()

        return render_template('request_done.html', request=request)
    return render_template('request.html', form=form)


@app.route('/booking/<int:id_teacher>/<day>/<time>/', methods=["GET", "POST"])
def re_booking(id_teacher, day, time):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º/–ø–æ–ª—É—á–∞–µ–º —Ñ–æ—Ä–º—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ –≤–∞–ª–∏–¥–∞—Ü–∏—é
    form = BookingForm()
    if form.validate_on_submit():
        clientName = form.clientName.data
        clientPhone = form.clientPhone.data
        clientWeekday = form.clientWeekday.data
        clientTime = form.clientTime.data
        clientTeacher = int(form.clientTeacher.data)
        # –§–∏–∫—Å–∏—Ä—É–µ–º –±—Ä–æ–Ω—å —É –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
        free_st = db.session.query(Timetable).filter(
            db.and_(Timetable.teacher_id == clientTeacher, Timetable.day == clientWeekday, Timetable.time == clientTime)
        ).first()
        free_st.free = False
        # –ó–∞–Ω–æ—Å–∏–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ç–∞–±–ª–∏—Ü—É bookings –ë–î
        booking = Booking(
            name=clientName,
            phone=clientPhone,
            day=clientWeekday,
            time=clientTime,
            teacher_id=clientTeacher
        )
        db.session.add(booking)
        db.session.commit()

        return render_template('booking_done.html', booking=booking, days=days)

    teacher = db.session.query(Teacher).get_or_404(id_teacher)
    return render_template('booking.html', teacher=teacher, day=day, time=time, days=days, form=form)


@app.route('/all/')
def re_all():
    # –§–∏–ª—å—Ç—Ä –≤—Å–µ—Ö –ø—Ä–µ–ø–æ–¥–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –ø–æ —É–±—ã–≤–∞–Ω–∏—é —Ä–µ–π—Ç–∏–Ω–≥–∞
    goals = db.session.query(Goal).all()
    teachers = db.session.query(Teacher).order_by(Teacher.rating.desc()).all()
    return render_template('all.html', pics=pics, goals=goals, teachers=teachers)


if __name__ == '__main__':
    app.run()
